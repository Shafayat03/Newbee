// check a number is even or odd -->> checking the LSB(Least Significent Bit) 
complexity: O(1)

n & 1 -- >> if true --> ODD
n & 1 -->> if false -->  EVEN


if(n & 1) cout <<"ODD\n";
else cout <<"EVEN\n";

/// checking a  number is power of 2 (2^n) or not 


x & (x-1)  -->>  if True  -->> power of 2
x & (x-1) -->> if False -->> not a power of 2 

it does'nt work if  x == 0


## we can check by this function is a power of 2 or not 

bool powerof2(int x){
return  x && !(x & (x-1));

}


##. Playing With the kth bit  (kth bit means --> kth least significant bit)

(1 << k)  == 2 ^ k;



1. check if kth bit is set --->>    x & (1 << k)
2. Toggle  the kth bit   --->>      x ^ ( 1 << k)
3. Set the kth bit     --->>       x | (1 << k)
4. unset the kth bit -->>          x & ~(1 << k)



##.  Multiply or  Divide a number by  2 ^ k

(x * 2 ^ k ) multiply  :    ( x << k)     (left shift) -->>    ( remove the LSB)

(x/ 2 ^ k ) Divide   :   ( x >> k )      (Right  Shift ) -->>  ( remove the LSB)






##.  Find out   x % 2 ^ k

  check --->>   x & ((1 << k) - 1) 



##. swapping 2 numbers x and y without using a temporary variable

x = x ^ y     { x = x ^ y,   y = y}

y =  x ^ y    { x = x ^ y,  y = x ^ y ^ y = x}

x =  x ^ y     { x = x ^ y ^ x = y ,   y = x }


##. Property :   no. of set bits in A = X
                 no. of set bits in B =  Y;
                 no. of set bits in (A ^ B) = Z

then    
      Z is even if    X + Y   is even 
      Z is  odd  if   X + Y  is  odd






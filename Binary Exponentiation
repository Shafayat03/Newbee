
/// Exponentiation code   :  a ^ b

#include<bits/stdc++.h>
using namespace std;

int  main(){


    int a,x;
    cin >> a >> x;

    int res = 1;

    for(int i = 1; i <= x; i++)
    {
        res *= a;  /// res = res * a;
    }

   cout <<res << endl;

return 0;
}






/****************** Optimal code ***********/



/// Optimal code

/// Exponentiation code   :  a ^ b



 int power(int a, int x)
 {
     if(x==0)  return 1;

     if(x % 2)   /// we also write this using :   !(x & 1)
     {
         int res = power(a,(x-1)/2);
         return res * res * a;
     }
     else{
        int res = power(a,x/2);
        return res * res;
     }
 }




#include<bits/stdc++.h>
using namespace std;

int  main(){


    int a,x;
    cin >> a >> x;

    int res = power(a,x);
    cout << res << endl;



return 0;
}





/**************** more optimal approach ******/


/// Optimal code   --- > Iterative approach

///Binary  Exponentiation code   :  a ^ b




#include<bits/stdc++.h>

#define MOD = 1e9 + 7;
using namespace std;
unsigned int power(int x, int y, nt p = MOD)
{
    unsigned long long res = 1;

    x = x % p;

    while(y > 0)
    {
        if(y & 1)  res = (res * x) % p;

        y = y >> 1;
        x = (x * x ) % p;
    }
    return res;
}
int  main(){


    int a,x;
    cin >> a >> x;

    int res = power(a,x);
    cout << res << endl;



return 0;
}










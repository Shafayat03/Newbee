/// Binary Search 


#include<bits/stdc++.h>
using namespace std;
using ll = long long;
#define shafu() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)


/// 1. Basic Implementation of Binary Search


/*
 6 
 2 3 4 5 6 7
 5
 output : 3
 */

int32_t main(){

   int n;
   cin >> n;
   vector<int>v(n);

   for(int i = 0; i < n;i++)cin >> v[i];


   int lo = 0, hi = n  - 1;

   int to_find;
   cin >> to_find;

   int mid;

   while(hi - lo > 1){

      int mid = (lo + hi)/2;

      if(v[mid] < to_find){
        lo = mid + 1;
      }
      else{
        hi = mid;
      }
   }
  if(v[lo] == to_find){
    cout << lo << '\n';
  }
  else if(v[hi] == to_find){
    cout << hi << '\n';
  }
  else{
    cout <<"Not found\n";
  }

 return 0;
}







/// 2.Lower Bound using  Binary Search





#include<bits/stdc++.h>
using namespace std;
using ll = long long;
#define shafu() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)



/*

 6 
 2 3 4 5 6 7
 5
 output : 3
 */



int Lower_bound(vector<int>&v, int element){
   int lo = 0, hi = v.size() - 1;
  
  int mid ;


  while(hi - lo  > 1){
      mid = (hi + lo )/2;
      if(v[mid]  <  element){
         lo = mid + 1;
      }
      else{
         hi =  mid;
      }
  }

  if(v[lo] >= element){
   return lo;
  }
  if(v[hi] >= element){
   return hi;
  }
  return -1;


}











int32_t main(){

   int n;
   cin >> n;
   vector<int>v(n);

   for(int i = 0; i < n;i++)cin >> v[i];

  int element;
  cin >> element;
int lb =  Lower_bound(v, element);
   
   cout << lb << ' ' << v[lb] << '\n';
 return 0;
}



























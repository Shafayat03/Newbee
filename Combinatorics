                       n!
/// Permutation :  ------------
                     (n-r)!



                        n!
/// Combination :   -----------
                     (n-r)! r!









/// Code for nCr

#include<bits/stdc++.h>

const int  MOD = 1e9 + 7;
#define uint unsigned long long
#define int long long
using namespace std;

int power(int x, int y, int p = MOD)
{
    unsigned long long res = 1;

    x = x % p;

    while(y > 0)
    {
        if(y & 1)  res = (res * x) % p;

        y = y >> 1;
        x = (x * x ) % p;
    }
    return res;
}


int modInverse(int n, int  p = 1e9+7)
{
    return power(n,  p-2, p);

}

uint nCr(int n, int r, int p = MOD)
{

    if(n < r) return 0;

    if(r == 0) return 1;

    vector<int>fac(n+1,0);

    fac[0] = 1;
    for(int i = 1; i <= n; i++)
        fac[i] = (fac[i-1] * i) % p;

    return (fac[n] * modInverse(fac[r],p) %  p * modInverse(fac[n-r],p) % p) % p;
}

int32_t main()
{
    int n,r;
    cin >> n >> r;
    cout << nCr(n,r) << endl;
    return 0;
}












#include<bits/stdc++.h>
using namespace std;

/// Basic DP
 /// fibonacci

 const int mx = 1e5 + 123;

 int dp[mx];

/// Top down approach -- line(12-22)
 int fib(int n){

    if(n == 0) return 0;

    if(n == 1) return 1;

    if(dp[n] != -1) return dp[n];

    return dp[n] = fib(n -1) + fib(n - 2);

 }

int32_t main(){


   memset(dp, -1 , sizeof(dp));

   int n;
   cin >> n;
   
   /// Bottom Up approach ---> line(33- 40)
   
 dp[0] = 0;
 
 dp[1]  = 1;  
   
   for(int i = 2; i <= n; i++){
    dp[i] = dp[i-1] + dp[i-2];
   }
   
   cout << fib(n) << endl;






  return 0;
}












/// Frog_1  Dp atcoder 











#include<bits/stdc++.h>
using namespace std;

/// frog1 ATcoder Dp

 const int mx = 1e5 + 123;
int h[mx];
 int dp[mx];

int jump(int i ){
   if( i == 0) return 0;

   if(dp[i] != -1) return dp[i];

   int cost = INT_MAX;

   cost = min(cost, jump(i-1) + abs(h[i] - h[i-1]));



   if(i > 1)cost = min(cost, jump(i-2) + abs(h[i] - h[i-2]));

  return dp[i] = cost;
}

int32_t main(){


   memset(dp, -1 , sizeof(dp));

   int n;
   cin >> n;

   for(int i = 0; i < n; i++){
      cin >> h[i];
   }
   cout << jump(n-1);







  return 0;
}






/// Frog2 problem atcoder DP



#include<bits/stdc++.h>
using namespace std;

/// frog2 ATcoder Dp
int k;
 const int mx = 1e5 + 123;
int h[mx];
 int dp[mx];

int jump(int i ){
   if( i == 0) return 0;

   if(dp[i] != -1) return dp[i];

   int cost = INT_MAX;


for(int j = 1; j <= k; j++){

    if(i - j >= 0)
   cost = min(cost, jump(i-j) + abs(h[i] - h[i-j]));
}

  return dp[i] = cost;
}

int32_t main(){


   memset(dp, -1 , sizeof(dp));

   int n;
   cin >> n >> k;

   for(int i = 0; i < n; i++){
      cin >> h[i];
   }
   cout << jump(n-1);

  return 0;
}




#include<bits/stdc++.h>
using namespace std;

/// Finding the Longest Increasing Subsequence of an array using Bruteforce method
int k;
 const int mx = 25e2 + 123;
 vector<int>a(mx);
//int h[mx];
// int dp[mx];

int lis(int i ){

  int ans = 1;
  for(int j = 0; j  < i; j++){
     if(a[i] > a[j]){
        ans = max(ans, lis(j)+1);
     }
  }

  // if(dp[i] != -1) return dp[i];
return ans;
}

int32_t main(){


 //  memset(dp, -1 , sizeof(dp));

   int n;
   cin >> n ;

   for(int i = 0; i < n; i++){
      cin >> a[i];
   }
  // cout << jump(n-1);

int ans = 0;

for(int i = 0; i < n; i++){
    ans = max(ans, lis(i));
}


cout <<  ans << '\n';


  return 0;
}


/**

  input :  8
           10 9 2 5  3 7 101 8


output :   4




*/


#include<bits/stdc++.h>
using namespace std;

/// Finding the Longest Increasing Subsequence of an array using DP
//int k;
 const int mx = 25e2 + 123;
 vector<int>a(mx);
//int h[mx];
 int dp[mx];

int lis(int i ){
   
  if(dp[i] != -1) return dp[i];
  int ans = 1;
  for(int j = 0; j  < i; j++){
     if(a[i] > a[j]){
        ans = max(ans, lis(j)+1);
     }
  }

return  dp[i] = ans;
}

int32_t main(){


  memset(dp, -1 , sizeof(dp));

   int n;
   cin >> n ;

   for(int i = 0; i < n; i++){
      cin >> a[i];
   }
  // cout << jump(n-1);

int ans = 0;

for(int i = 0; i < n; i++){
    ans = max(ans, lis(i));
}


cout <<  ans << '\n';


  return 0;
}


/**




  input :  8
           10 9 2 5  3 7 101 8


output :   4









*/


